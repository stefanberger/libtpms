/********************************************************************************/
/*										*/
/*		Algorithm Values from the TCG Algorithm Registry 		*/
/*			     Written by Ken Goldman				*/
/*		       IBM Thomas J. Watson Research Center			*/
/*										*/
/*  Licenses and Notices							*/
/*										*/
/*  1. Copyright Licenses:							*/
/*										*/
/*  - Trusted Computing Group (TCG) grants to the user of the source code in	*/
/*    this specification (the "Source Code") a worldwide, irrevocable, 		*/
/*    nonexclusive, royalty free, copyright license to reproduce, create 	*/
/*    derivative works, distribute, display and perform the Source Code and	*/
/*    derivative works thereof, and to grant others the rights granted herein.	*/
/*										*/
/*  - The TCG grants to the user of the other parts of the specification 	*/
/*    (other than the Source Code) the rights to reproduce, distribute, 	*/
/*    display, and perform the specification solely for the purpose of 		*/
/*    developing products based on such documents.				*/
/*										*/
/*  2. Source Code Distribution Conditions:					*/
/*										*/
/*  - Redistributions of Source Code must retain the above copyright licenses, 	*/
/*    this list of conditions and the following disclaimers.			*/
/*										*/
/*  - Redistributions in binary form must reproduce the above copyright 	*/
/*    licenses, this list of conditions	and the following disclaimers in the 	*/
/*    documentation and/or other materials provided with the distribution.	*/
/*										*/
/*  3. Disclaimers:								*/
/*										*/
/*  - THE COPYRIGHT LICENSES SET FORTH ABOVE DO NOT REPRESENT ANY FORM OF	*/
/*  LICENSE OR WAIVER, EXPRESS OR IMPLIED, BY ESTOPPEL OR OTHERWISE, WITH	*/
/*  RESPECT TO PATENT RIGHTS HELD BY TCG MEMBERS (OR OTHER THIRD PARTIES)	*/
/*  THAT MAY BE NECESSARY TO IMPLEMENT THIS SPECIFICATION OR OTHERWISE.		*/
/*  Contact TCG Administration (admin@trustedcomputinggroup.org) for 		*/
/*  information on specification licensing rights available through TCG 	*/
/*  membership agreements.							*/
/*										*/
/*  - THIS SPECIFICATION IS PROVIDED "AS IS" WITH NO EXPRESS OR IMPLIED 	*/
/*    WARRANTIES WHATSOEVER, INCLUDING ANY WARRANTY OF MERCHANTABILITY OR 	*/
/*    FITNESS FOR A PARTICULAR PURPOSE, ACCURACY, COMPLETENESS, OR 		*/
/*    NONINFRINGEMENT OF INTELLECTUAL PROPERTY RIGHTS, OR ANY WARRANTY 		*/
/*    OTHERWISE ARISING OUT OF ANY PROPOSAL, SPECIFICATION OR SAMPLE.		*/
/*										*/
/*  - Without limitation, TCG and its members and licensors disclaim all 	*/
/*    liability, including liability for infringement of any proprietary 	*/
/*    rights, relating to use of information in this specification and to the	*/
/*    implementation of this specification, and TCG disclaims all liability for	*/
/*    cost of procurement of substitute goods or services, lost profits, loss 	*/
/*    of use, loss of data or any incidental, consequential, direct, indirect, 	*/
/*    or special damages, whether under contract, tort, warranty or otherwise, 	*/
/*    arising in any way out of use or reliance upon this specification or any 	*/
/*    information herein.							*/
/*										*/
/*  (c) Copyright IBM Corp. and others, 2019 - 2024				*/
/*										*/
/********************************************************************************/

// FILE GENERATED BY TpmExtractCode: DO NOT EDIT

#ifndef _TPM_INCLUDE_PRIVATE_TPMALGORITHMDEFINES_H_
#define _TPM_INCLUDE_PRIVATE_TPMALGORITHMDEFINES_H_

#if ALG_ECC

// Derived ECC Value
#  define ECC_CURVES                                                       \
      {                                                                    \
          TPM_ECC_NIST_P192, TPM_ECC_NIST_P224, TPM_ECC_NIST_P256,         \
              TPM_ECC_NIST_P384, TPM_ECC_NIST_P521, TPM_ECC_BN_P256,       \
              TPM_ECC_BN_P638, TPM_ECC_SM2_P256}

#  define ECC_CURVE_COUNT                                                            \
      (ECC_NIST_P192 + ECC_NIST_P224 + ECC_NIST_P256 + ECC_NIST_P384 + ECC_NIST_P521 \
       + ECC_BN_P256 + ECC_BN_P638 + ECC_SM2_P256)

// Avoid expanding MAX_ECC_KEY_BITS into a long expression, the compiler slows down
// and on some compilers runs out of heap space.

#define MAX_ECC_KEY_BITS						\
    MAX(ECC_BN_P256 * 256,   MAX(ECC_BN_P638 * 638,			\
    MAX(ECC_NIST_P192 * 192, MAX(ECC_NIST_P224 * 224, \
    MAX(ECC_NIST_P256 * 256, MAX(ECC_NIST_P384 * 384, \
    MAX(ECC_NIST_P521 * 521, MAX(ECC_SM2_P256 * 256, \
    0))))))))
#define MAX_ECC_KEY_BYTES               BITS_TO_BYTES(MAX_ECC_KEY_BITS)

#endif  // ALG_ECC

#if ALG_RSA
// Table "Defines for RSA Asymmetric Cipher Algorithm Constants" (TCG Algorithm Registry)
#  define RSA_KEY_SIZES_BITS                                                      \
      (RSA_1024 * 1024), (RSA_2048 * 2048), (RSA_3072 * 3072), (RSA_4096 * 4096), \
          (RSA_16384 * 16384)

#  if RSA_16384
#    define RSA_MAX_KEY_SIZE_BITS 16384
#  elif RSA_4096
#    define RSA_MAX_KEY_SIZE_BITS 4096
#  elif RSA_3072
#    define RSA_MAX_KEY_SIZE_BITS 3072
#  elif RSA_2048
#    define RSA_MAX_KEY_SIZE_BITS 2048
#  elif RSA_1024
#    define RSA_MAX_KEY_SIZE_BITS 1024
#  else
#    error RSA Enabled, but no RSA key sizes enabled.
#  endif

#  define MAX_RSA_KEY_BITS  RSA_MAX_KEY_SIZE_BITS
#  define MAX_RSA_KEY_BYTES BITS_TO_BYTES(RSA_MAX_KEY_SIZE_BITS)
#endif  // ALG_RSA

// Table "Defines for AES Symmetric Cipher Algorithm Constants" (TCG Algorithm Registry)
#define AES_KEY_SIZES_BITS (128 * AES_128), (192 * AES_192), (256 * AES_256)
#define MAX_AES_KEY_BITS            AES_MAX_KEY_SIZE_BITS
#define MAX_AES_KEY_BYTES           ((AES_MAX_KEY_SIZE_BITS + 7) / 8)
#define AES_128_BLOCK_SIZE_BYTES    (AES_128 * 16)
#define AES_192_BLOCK_SIZE_BYTES    (AES_192 * 16)
#define AES_256_BLOCK_SIZE_BYTES    (AES_256 * 16)
#define AES_BLOCK_SIZES							\
    AES_128_BLOCK_SIZE_BYTES, AES_192_BLOCK_SIZE_BYTES,			\
	AES_256_BLOCK_SIZE_BYTES
#if   ALG_AES
#   define AES_MAX_BLOCK_SIZE       16
#else
#   define AES_MAX_BLOCK_SIZE       0
#endif
#define MAX_AES_BLOCK_SIZE_BYTES    AES_MAX_BLOCK_SIZE
#if   AES_256
#   define AES_MAX_KEY_SIZE_BITS    256
#elif AES_192
#   define AES_MAX_KEY_SIZE_BITS    192
#elif AES_128
#   define AES_MAX_KEY_SIZE_BITS    128
#else
#   define AES_MAX_KEY_SIZE_BITS    0
#endif

// Table "Defines for SM4 Symmetric Cipher Algorithm Constants" (TCG Algorithm Registry)
#define SM4_KEY_SIZES_BITS       (SM4_128 * 128)
#if   SM4_128
#   define SM4_MAX_KEY_SIZE_BITS    128
#else
#   define SM4_MAX_KEY_SIZE_BITS    0
#endif
#define MAX_SM4_KEY_BITS         SM4_MAX_KEY_SIZE_BITS
#define MAX_SM4_KEY_BYTES        BITS_TO_BYTES(SM4_MAX_KEY_SIZE_BITS)
#define SM4_128_BLOCK_SIZE_BYTES    (SM4_128 * 16)
#define SM4_BLOCK_SIZES             SM4_128_BLOCK_SIZE_BYTES
#if   ALG_SM4
#   define SM4_MAX_BLOCK_SIZE       16
#else
#   define SM4_MAX_BLOCK_SIZE       0
#endif
#define MAX_SM4_BLOCK_SIZE_BYTES    SM4_MAX_BLOCK_SIZE

// Table "Defines for CAMELLIA Symmetric Cipher Algorithm Constants" (TCG Algorithm Registry)
#define CAMELLIA_KEY_SIZES_BITS \
    (CAMELLIA_128 * 128), (CAMELLIA_192 * 192), (CAMELLIA_256 * 256)
#if   CAMELLIA_256
#   define CAMELLIA_MAX_KEY_SIZE_BITS   256
#elif CAMELLIA_192
#   define CAMELLIA_MAX_KEY_SIZE_BITS   192
#elif CAMELLIA_128
#   define CAMELLIA_MAX_KEY_SIZE_BITS   128
#else
#   define CAMELLIA_MAX_KEY_SIZE_BITS   0
#endif
#define MAX_CAMELLIA_KEY_BITS  CAMELLIA_MAX_KEY_SIZE_BITS
#define MAX_CAMELLIA_KEY_BYTES          ((CAMELLIA_MAX_KEY_SIZE_BITS + 7) / 8)
#define CAMELLIA_128_BLOCK_SIZE_BYTES   (CAMELLIA_128 * 16)
#define CAMELLIA_192_BLOCK_SIZE_BYTES   (CAMELLIA_192 * 16)
#define CAMELLIA_256_BLOCK_SIZE_BYTES   (CAMELLIA_256 * 16)
#define CAMELLIA_BLOCK_SIZES \
    CAMELLIA_128_BLOCK_SIZE_BYTES, CAMELLIA_192_BLOCK_SIZE_BYTES,	\
        CAMELLIA_256_BLOCK_SIZE_BYTES
#if   ALG_CAMELLIA
#   define CAMELLIA_MAX_BLOCK_SIZE      16
#else
#   define CAMELLIA_MAX_BLOCK_SIZE      0
#endif
#define MAX_CAMELLIA_BLOCK_SIZE_BYTES   CAMELLIA_MAX_BLOCK_SIZE

//										libtpms added begin
#define TDES_KEY_SIZES_BITS         (128 * TDES_128), (192 * TDES_192)
#if   TDES_192
#   define TDES_MAX_KEY_SIZE_BITS   192
#elif TDES_128
#   define TDES_MAX_KEY_SIZE_BITS   128
#else
#   define TDES_MAX_KEY_SIZE_BITS   0
#endif
#define MAX_TDES_KEY_BITS           TDES_MAX_KEY_SIZE_BITS
#define MAX_TDES_KEY_BYTES          ((TDES_MAX_KEY_SIZE_BITS + 7) / 8)
#define TDES_128_BLOCK_SIZE_BYTES   (TDES_128 * 8)
#define TDES_192_BLOCK_SIZE_BYTES   (TDES_192 * 8)
#define TDES_BLOCK_SIZES						\
    TDES_128_BLOCK_SIZE_BYTES, TDES_192_BLOCK_SIZE_BYTES
#if   ALG_TDES
#   define TDES_MAX_BLOCK_SIZE      8
#else
#   define TDES_MAX_BLOCK_SIZE      0
#endif
#define MAX_TDES_BLOCK_SIZE_BYTES   TDES_MAX_BLOCK_SIZE
//										libtpms added end

// Derived Symmetric Values
#define MAX_SYM_BLOCK_SIZE \
    (MAX(AES_MAX_BLOCK_SIZE,      MAX(CAMELLIA_MAX_BLOCK_SIZE,		\
				      MAX(SM4_MAX_BLOCK_SIZE,      MAX(TDES_MAX_BLOCK_SIZE, \
								       0)))))
#define MAX_SYM_KEY_BITS						\
    (MAX(AES_MAX_KEY_SIZE_BITS,      MAX(CAMELLIA_MAX_KEY_SIZE_BITS,	\
					 MAX(SM4_MAX_KEY_SIZE_BITS,      MAX(TDES_MAX_KEY_SIZE_BITS, \
									     0)))))
#define MAX_SYM_KEY_BYTES ((MAX_SYM_KEY_BITS + 7) / 8)
#if MAX_SYM_KEY_BITS == 0 || MAX_SYM_BLOCK_SIZE == 0
#   error Bad size for MAX_SYM_KEY_BITS or MAX_SYM_BLOCK
#endif



// Table "Defines for SHA1 Hash Values" (TCG Algorithm Registry)
#define SHA1_DIGEST_SIZE 20
#define SHA1_BLOCK_SIZE  64

// Table "Defines for SHA256 Hash Values" (TCG Algorithm Registry)
#define SHA256_DIGEST_SIZE 32
#define SHA256_BLOCK_SIZE  64

// Table "Defines for SHA384 Hash Values" (TCG Algorithm Registry)
#define SHA384_DIGEST_SIZE 48
#define SHA384_BLOCK_SIZE  128

// Table "Defines for SHA512 Hash Values" (TCG Algorithm Registry)
#define SHA512_DIGEST_SIZE 64
#define SHA512_BLOCK_SIZE  128

// Table "Defines for SM3_256 Hash Values" (TCG Algorithm Registry)
#define SM3_256_DIGEST_SIZE 32
#define SM3_256_BLOCK_SIZE  64

// Table "Defines for SHA3_256 Hash Values" (TCG Algorithm Registry)
#define SHA3_256_DIGEST_SIZE 32
#define SHA3_256_BLOCK_SIZE  136

// Table "Defines for SHA3_384 Hash Values" (TCG Algorithm Registry)
#define SHA3_384_DIGEST_SIZE 48
#define SHA3_384_BLOCK_SIZE  104

// Table "Defines for SHA3_512 Hash Values" (TCG Algorithm Registry)
#define SHA3_512_DIGEST_SIZE 64
#define SHA3_512_BLOCK_SIZE  72

// Derived Hash Values
#define HASH_COUNT                                                                \
    (ALG_SHA1 + ALG_SHA256 + ALG_SHA384 + ALG_SHA512 + ALG_SM3_256 + ALG_SHA3_256 \
     + ALG_SHA3_384 + ALG_SHA3_512)

// Leaving these as MAX-based calculations because (a) they don't slow down the
// build noticably, and (b) hash block and digest sizes vary, so the #if
// cascades for these are significantly more error prone to maintain.
#define MAX_HASH_BLOCK_SIZE                                       \
    MAX((ALG_SHA3_512 * SHA3_512_BLOCK_SIZE),                     \
        MAX((ALG_SHA3_384 * SHA3_384_BLOCK_SIZE),                 \
            MAX((ALG_SHA3_256 * SHA3_256_BLOCK_SIZE),             \
                MAX((ALG_SM3_256 * SM3_256_BLOCK_SIZE),           \
                    MAX((ALG_SHA512 * SHA512_BLOCK_SIZE),         \
                        MAX((ALG_SHA384 * SHA384_BLOCK_SIZE),     \
                            MAX((ALG_SHA256 * SHA256_BLOCK_SIZE), \
                                (ALG_SHA1 * SHA1_BLOCK_SIZE))))))))

#define MAX_HASH_DIGEST_SIZE                                       \
    MAX((ALG_SHA3_512 * SHA3_512_DIGEST_SIZE),                     \
        MAX((ALG_SHA3_384 * SHA3_384_DIGEST_SIZE),                 \
            MAX((ALG_SHA3_256 * SHA3_256_DIGEST_SIZE),             \
                MAX((ALG_SM3_256 * SM3_256_DIGEST_SIZE),           \
                    MAX((ALG_SHA512 * SHA512_DIGEST_SIZE),         \
                        MAX((ALG_SHA384 * SHA384_DIGEST_SIZE),     \
                            MAX((ALG_SHA256 * SHA256_DIGEST_SIZE), \
                                (ALG_SHA1 * SHA1_DIGEST_SIZE))))))))

#define MAX_DIGEST_SIZE MAX_HASH_DIGEST_SIZE

#if MAX_HASH_DIGEST_SIZE == 0 || MAX_HASH_BLOCK_SIZE == 0
#  error "Hash data not valid"
#endif

// Define the 2B structure that would hold any hash block
TPM2B_TYPE(MAX_HASH_BLOCK, MAX_HASH_BLOCK_SIZE);

// Following typedef is for some old code
typedef TPM2B_MAX_HASH_BLOCK TPM2B_HASH_BLOCK;

#endif  // _TPM_INCLUDE_PRIVATE_TPMALGORITHMDEFINES_H_
